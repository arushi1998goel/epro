
package net.medavante.portal.qa.pages.studynavigator;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import net.medavante.portal.pages.MedAvantePortalPage;
import net.medavante.portal.selenium.core.BasePage;

public class StudySubjectListingPage extends BasePage {

	@FindBy(xpath = "//h1[contains(text(),'Subjects:')]")
	private WebElement subjectCount;

	@FindBy(xpath = "//a[@title='Add Subject']")
	private WebElement addSubjectICON;

	@FindBy(xpath = "//div[@class='error-container']/label")
	private WebElement headerErrorTXT;

	@FindBy(xpath = "//div[@class='error-container']//div[@class='close-button-white']")
	private WebElement headerErrorCloseBtN;

	@FindBy(xpath = "//h1[contains(text(),'Subjects: All')]")
	private WebElement subjectCountTITLE;

	@FindBy(xpath = "//div[contains(@class,'show in')]//h4[@data-ng-hide='isEdit' and text()='Add Subject']")
	private WebElement addSubPopup_AddSubjectTITLE;

	@FindBy(xpath = "//div[@id='create-or-edit-subject-dialog']//h4[@data-ng-show='isEdit' and text()='Edit Subject']")
	private WebElement editSubPopup_EditSubjcet;

	@FindBy(xpath = "//div[@class='modal fade smart-modal modal-form-window']")
	private WebElement closedAddSubPopup;

	@FindBy(xpath = "//a[@title='Add Subject']")
	private WebElement addSubjectBTN;

	@FindBy(xpath = "//div[contains(@class,'show in')]//form[@name='subjectForm' and contains(@class,'ng-invalid ng-invalid-required')]")
	private WebElement addSubPopup_RequiredScreeningINP;

	@FindBy(xpath = "//div[contains(@class,'show in')]//form[@name='subjectForm' and contains(@class,'ng-valid ng-valid-required')]")
	private WebElement addSubPopup_NonRequiredScreeningINP;

	@FindBy(xpath = "//div[contains(@class,'show in')]//input[@name='screeningNumber']")
	private WebElement addSubPopup_ScreeningINP;

	@FindBy(xpath = "//div[contains(@class,'show in')]//input[@name='randomizationNumber']")
	private WebElement addSubPopup_RandomizationINP;

	@FindBy(xpath = "//div[contains(@class,'show in')]//input[@name='temporaryId' and contains(@class,'ng-invalid-required')]")
	private WebElement addSubPopup_TempIdINPFieldVAL;

	@FindBy(xpath = "//div[contains(@class,'show in')]//label[text()='Language']/parent::div/div/button[@class='btn btn-default dropdown-toggle ng-binding dropdown-invalid']")
	private WebElement addSubPopup_LanguageDROPDOWNFieldVAL;

	@FindBy(xpath = "//ul[@class='dropdown-menu']//li[@ng-repeat='a in cultures']/a")
	private List<WebElement> configuredLanguageLIST;

	@FindBy(xpath = "//div[contains(@class,'show in')]//label[text()='Language']/parent::div//button")
	private WebElement addSubPopup_SelectedSubjectLanguage;

	@FindBy(xpath = "//div[contains(@class,'show in')]//textarea[@id='notes-input']")
	private WebElement addSubPopup_NotesINP;

	@FindBy(xpath = "//div[contains(@class,'show in')]//button[@data-ng-click='save()']")
	private WebElement addSubPopup_SaveBTN;

	@FindBy(xpath = "//div[contains(@class,'show in')]//div[@class='modal-footer']/button[@data-ng-click='close()']")
	private WebElement addSubPopup_CancelBTN;

	@FindBy(xpath = "//div[@class='temporary-id-generation ng-scope']/label/b")
	private WebElement addSubPopup_GenerateTemporaryIDTXT;

	@FindBy(xpath = "//div[@class='temporary-id-generation ng-scope']//div[@title='Generate TemporaryID']")
	private WebElement addSubPopup_GenerateTemporaryIDBTN;

	@FindBy(xpath = "//input[@name='temporaryId']")
	private WebElement addSubPopup_TempINP;

	@FindBy(xpath = "//div[@class='temporary-id-generation ng-scope']//div[@title='Remove Autogenerated TemporaryID']")
	private WebElement addSubPopup_AutoGenerateTempCancelBTN;

	@FindBy(xpath = "//a[@title='Add Subject']/following-sibling::ul[@class='dropdown-menu inline-dropdown']")
	private WebElement siteListDROPDOWN;

	@FindBy(xpath = "//div[contains(@class,'filtering-fields-list-container')]")
	private WebElement filterDROPDOWN;

	@FindBy(xpath = "//input[@id='input-holder']")
	private WebElement filterBox;

	@FindBy(xpath = "//div[@class='input-container']//following-sibling::ul/li/a")
	private List<WebElement> addFilterLIST;

	@FindBy(xpath = "//ul[@id='common-selector']/following-sibling::ul/li/a")
	private List<WebElement> addSubFilterLIST;

	@FindBy(xpath = "//a[@title='Add Subject']/following-sibling::ul/li/a")
	private List<WebElement> addSubjectSiteLIST;

	@FindBy(xpath = "//ul[@class='dropdown-menu inline-dropdown']")
	private WebElement siteDropDown;

	@FindBy(xpath = "//div[@class='row grid-row ng-scope']/div[1]//div//label")
	private List<WebElement> subjectTXT;

	@FindBy(xpath = "//div[@id='breadcrumbs']/a[@class='home']")
	private WebElement homeICN;

	@FindBy(xpath = "//div[@id='portal-grid-page-content']/div")
	private List<WebElement> subjectListRow;

	@FindBy(xpath = "//div[@class='row sub-header']/div/label")
	private List<WebElement> columnNameList;

	@FindBy(xpath = "//div[@class='temporary-id-generation ng-scope']//div[@class='circle-button btn btn-white']")
	private WebElement autoGeneratetempIdIcon;

	@FindBy(xpath = "(//div[contains(@class,'show in')]//form[@name='subjectForm' and contains(@class,'ng-invalid ng-invalid-required')]//input)[1]")
	private WebElement requiredScreeningNumberOnAddSubjectPopUp;

	@FindBy(xpath = "//label[text()='Consent to Record']/following-sibling::div/button")
	private WebElement consentToRecord;

	@FindBy(xpath = "//label[text()='Consent to Record']/following-sibling::div/button/span")
	private WebElement consentToRecordDropDwn;

	@FindBy(xpath = "//div[@class='dropdown ma-dropdown open']//span[text()='Yes']")
	private WebElement yesOptionUnderConsentToRecord;

	@FindBy(xpath = "//div[@class='dropdown ma-dropdown open']//li[3]/a/span[text()='No']")
	private WebElement NoOptionUnderConsentToRecord;

	@FindBy(xpath = "//div[@class='dropdown ma-dropdown open']//li")
	private List<WebElement> optionUnderConsentTorecordDropDown;

	public StudySubjectListingPage(WebDriver driver) {
		super(driver);
	}

	/**
	 * Verify Subject Listing page title and subject count is displayed
	 */
	public void verifySubjectListIsOpened() {
		Assert.assertTrue(isElementPresent(subjectCount) || isElementPresent(addSubjectBTN));
		reportInfo();

	}

	/**
	 * Verify Add Subject Button Is Displayed
	 */
	public void verifyAddSubjectBtnIsDisplayed() {
		// _normalWait(500);
		Assert.assertTrue(isElementPresent(addSubjectBTN));
		reportInfo();
	}

	/**
	 * Select site for selected study
	 * 
	 * @param siteNameToSelect
	 */
	public void selectSiteForNewSubject(String... siteNameToSelect) {
		String siteNameToBeSelect = siteNameToSelect[0];
		boolean flag = false;
		clickOnAddSubjectBTN();
		if (siteListDROPDOWN.isDisplayed()) {
			for (WebElement siteName : addSubjectSiteLIST) {
				if (getText(siteName).trim().contains(siteNameToBeSelect)) {
					waitAndClick(siteName);
					flag = true;
					break;
				}
			}
		}

		Assert.assertTrue(flag);
	}

	/**
	 * Select filter and sub filer
	 * 
	 * @param filterToSelect
	 */
	public void selectFilter(String filterToSelect, String subFilter) {
		inputText(filterBox, filterToSelect);
		if (filterDROPDOWN.isDisplayed())

			for (WebElement filterOption : addFilterLIST) {
				if (getText(filterOption).equalsIgnoreCase(filterToSelect)) {
					waitAndClick(filterOption);
					break;
				}
			}
		if (filterDROPDOWN.isDisplayed()) {

			for (WebElement subFilterOption : addSubFilterLIST) {
				if (getText(subFilterOption).equalsIgnoreCase(subFilter)) {
					waitAndClick(subFilterOption);
					break;
				}
			}
		}

	}

	/**
	 * click on add subject button to create new subject
	 */
	public void clickOnAddSubjectBTN(String... siteNameToSelect) {
		clickOn(addSubjectBTN);
		if (addSubjectSiteLIST.size() > 1) {
			for (WebElement siteName : addSubjectSiteLIST) {
				if (getText(siteName).trim().contains(siteNameToSelect[0])) {
					waitAndClick(siteName);
					break;
				}
			}
		}

		new WebDriverWait(driver, 20).until(ExpectedConditions.elementToBeClickable(addSubPopup_CancelBTN));
	}

	/**
	 * click on cancel button to close the add new subject popup
	 */
	public void clickOnCancelBTN() {
		clickOn(addSubPopup_CancelBTN);
	}

	/**
	 * Enter text in notes input field in add subject popup
	 * 
	 * @param inputNoteToBeEntered
	 */
	public void inputNotes(String inputNoteToBeEntered) {
		inputText(addSubPopup_NotesINP, inputNoteToBeEntered);
		reportInfo();
	}

	/**
	 * Verify Notes Text has been added
	 * 
	 * @param inputTextToBeVerified
	 */
	public void verifyNotesTextIsEntered(String inputTextToBeVerified) {
		Assert.assertEquals(inputTextToBeVerified, addSubPopup_NotesINP.getAttribute("value"));
	}

	/**
	 * Enter text in Screening input field in add subject popup
	 * 
	 * @param inputScreeningNumToBeEntered
	 */
	public void inputScreeningNum(String inputScreeningNumToBeEntered) {
		inputText(addSubPopup_ScreeningINP, inputScreeningNumToBeEntered);
		reportInfo();
	}

	/**
	 * Enter text in random num input field in add subject popup
	 * 
	 * @param inputRandomNumToBeEntered
	 */
	public void inputRandomizationNum(String inputRandomNumToBeEntered) {
		inputText(addSubPopup_RandomizationINP, inputRandomNumToBeEntered);
		reportInfo();
	}

	public void inputTemporaryID(String tempIdToBeEnter) {
		inputText(addSubPopup_TempINP, tempIdToBeEnter);

		inputText(addSubPopup_TempINP, tempIdToBeEnter);
		reportInfo();
	}

	/**
	 * Verify Screening Text has been added
	 * 
	 * @param screenNumToBeVerified
	 */
	public void verifyScreeningNumIsEntered(String screenNumToBeVerified) {
		Assert.assertEquals(screenNumToBeVerified, addSubPopup_ScreeningINP.getAttribute("value"));
		reportInfo();
	}

	/**
	 * Select language from the drop down options to create the subject in add
	 * subject popup
	 * 
	 * @param languageToBeSelect
	 */
	public void selectSubjectLanguage(String languageToBeSelect) {
		clickOn(addSubPopup_LanguageDROPDOWNFieldVAL);
		_normalWait(100);
		for (WebElement language : configuredLanguageLIST) {
			if (getText(language).trim().equalsIgnoreCase(languageToBeSelect)) {
				waitAndClick(language);
				break;
			}
		}
	}

	/**
	 * Clear screening number
	 */
	public void clearScreeningInp() {
		addSubPopup_ScreeningINP.clear();
		reportInfo();
	}

	/**
	 * Verify Save button is disabled
	 */

	public void verifySaveButtonIsDisabled() {
		Assert.assertFalse(addSubPopup_SaveBTN.isEnabled());
		reportInfo();
	}

	/**
	 * Click on save button of new subject Popup
	 * 
	 * @return SubjectsDetailsPage
	 */
	public NewSubjectDetailPage clickOnSaveBTN() {
		clickOn(addSubPopup_SaveBTN);
		new WebDriverWait(driver, 15)
				.until(ExpectedConditions.invisibilityOfElementLocated(By.xpath("//div[@class='smart-spinner']")));
		return PageFactory.initElements(driver, NewSubjectDetailPage.class);
	}

	/**
	 * Verify required Field are Highlighted in new add subject popup
	 */
	public void verifyRequiredFieldsAreHighlighted​() {
		Assert.assertTrue(
				addSubPopup_RequiredScreeningINP.isDisplayed() && addSubPopup_LanguageDROPDOWNFieldVAL.isDisplayed());
		reportInfo();
	}

	/**
	 * Verify new add subject popup is displayed
	 */
	public void verifyAddSubjectPopUpIsDisplayed() {
		Assert.assertTrue(isElementPresent(addSubPopup_AddSubjectTITLE));
		reportInfo();
	}

	/**
	 * Verify edit subject popup is displayed
	 */
	public void verifyEditSubjectPopUpIsDisplayed() {
		Assert.assertTrue(isElementPresent(editSubPopup_EditSubjcet));
		reportInfo();
	}

	/**
	 * Verify new add subject popup is not displayed
	 */
	public void verifyAddSubjectPopUpIsNotDisplayed() {
		Assert.assertFalse(closedAddSubPopup.isDisplayed());
		reportInfo();
	}

	/**
	 * Verify Language has been selected successfully
	 * 
	 * @param selectedLanguage
	 */
	public void verifyLanguageIsSelected(String selectedLanguage) {
		Assert.assertEquals(getText(addSubPopup_SelectedSubjectLanguage).trim(), selectedLanguage);
		reportInfo();
	}

	/**
	 * Click on subject name from the list of subject.
	 * 
	 * @param subjectNameToBeClicked
	 * @return SubjectsDetailsPage object
	 */
	public NewSubjectDetailPage selectSubject(String subjectNameToBeClicked) {
		for (WebElement subjectLabel : subjectTXT) {
			if (getText(subjectLabel).trim().equalsIgnoreCase(subjectNameToBeClicked)) {
				waitAndClick(subjectLabel.findElement(By.xpath("./parent::div/parent::div/parent::div")));
				break;

			}
		}
		return PageFactory.initElements(driver, NewSubjectDetailPage.class);
	}

	/**
	 * Verify Subject is not exist in Subject listing
	 * 
	 * @param subjectToBeVerified
	 */
	public void verifySubjectIsNotDisplayedInSubjectList(String subjectToBeVerified) {
		WebElement ele = null;
		boolean flag = false;
		do {
			try {
				ele = driver.findElement(By.xpath("//div[@id='portal-grid-page-content']/div/div[1]//label[text()='"
						+ subjectToBeVerified + "']"));
				moveToElement(ele);
				flag = true;
				break;
			} catch (Throwable e) {
				scrollDown("150");
				try {
					Thread.sleep(50);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		} while ((flag == false)
				&& driver.findElements(By.xpath("//div[@class='row text-center text-muted']")).size() > 0);
		reportInfo();
		Assert.assertFalse(flag);
		scrollToTopOfThePage();

	}

	public NewSubjectDetailPage clickOnSubject(String subjectToBeClicked) {
		WebElement subjectRow = null;
		boolean flag = false;
		do {
			try {
				subjectRow = driver
						.findElement(By.xpath("//div[@id='portal-grid-page-content']/div/div[1]//label[text()='"
								+ subjectToBeClicked + "']"));
				scrollDown("100");
				moveToElement(subjectRow);
				clickOn(subjectRow);
				new WebDriverWait(driver, 5).until(
						ExpectedConditions.invisibilityOfElementLocated(By.xpath("//div[@class='smart-spinner']")));
				flag = true;
				break;
			} catch (Throwable e) {
				scrollDown("150");
				try {
					Thread.sleep(10);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		} while ((flag == false)
				&& driver.findElements(By.xpath("//div[@class='row text-center text-muted']")).size() > 0);
		Assert.assertTrue(flag, "Subject Should be present in list to click");
		return PageFactory.initElements(driver, NewSubjectDetailPage.class);
	}

	/**
	 * Click on auto generate button to generate auto generate temp ID
	 */
	public String generateAutoTemporaryID() {
		clickOn(addSubPopup_GenerateTemporaryIDBTN);
		waitForWebElementEnable(addSubPopup_TempINP, 10);
		return addSubPopup_TempINP.getAttribute("value");
	}

	/**
	 * Verify
	 * 
	 * @param tempIdTextToBeVerified
	 */
	public void verifyAutoTemporaryIDIsGenerated(String tempIdTextToBeVerified) {
		Assert.assertTrue(addSubPopup_TempINP.getAttribute("value").trim().contains(tempIdTextToBeVerified));
		reportInfo();
	}

	public void verifyClickToGenerateTemporaryIDTXTIsDisplayWithActiveIcon() {

		Assert.assertTrue(addSubPopup_GenerateTemporaryIDTXT.isDisplayed());
		Assert.assertTrue(
				addSubPopup_GenerateTemporaryIDTXT.getText().trim().contains("Click to Generate TemporaryID"));
		Assert.assertTrue(
				addSubPopup_GenerateTemporaryIDBTN.isDisplayed() && addSubPopup_GenerateTemporaryIDBTN.isEnabled());
		reportInfo();
	}

	public void verifyClickToGenerateTemporaryIDTXTIsNotDisplay() {
		Assert.assertTrue(addSubPopup_TempINP.isDisplayed());
		reportInfo();
	}

	public void clickOnGenerateTempID() {

		waitAndClick(addSubPopup_GenerateTemporaryIDBTN);

	}

	/**
	 * Click on auto Generate cancel button to remove the auto Generated Temp Id
	 */

	public void removeAutoGenerateTemporaryID() {
		clickOn(addSubPopup_AutoGenerateTempCancelBTN);
	}

	/**
	 * Verify Auto Generate Temporary Cancel(Remove Icon) Button is displayed
	 */
	public void verifyAutoGenerateTemporaryCancelBTNIsDisplay() {
		Assert.assertTrue(addSubPopup_AutoGenerateTempCancelBTN.isDisplayed());
		reportInfo();
	}

	/**
	 * Verify Screening Number field is become Not Required And also Editable
	 */
	public void verifyScreeningNumNotRequiredAndEditable() {
		Assert.assertTrue(
				addSubPopup_NonRequiredScreeningINP.isDisplayed() && addSubPopup_NonRequiredScreeningINP.isEnabled());
		reportInfo();
	}

	/**
	 * Verify Screening Number field is Required And also Editable
	 */
	public void verifyScreeningNumIsRequiredAndEditable() {
		Assert.assertTrue(
				addSubPopup_RequiredScreeningINP.isDisplayed() && addSubPopup_RequiredScreeningINP.isEnabled());
		reportInfo();
	}

	/*
	 * verify consent to record is disabled on add Subject popup
	 */

	public void verifyConsentRecordDisabled() {
		Assert.assertTrue(consentToRecord.getAttribute("disabled").contains("true"));
		reportInfo();
	}

	/*
	 * verify consent to record is enabled on add Subject popup
	 */

	public void verifyConsentRecordEnabled() {
		Assert.assertTrue(isElementDisplayed(consentToRecord));
		reportInfo();
	}

	/****
	 * verify yes option is present in consent to reord option
	 */
	public void veifyYesOptionIsPresent(String Option) {
		clickOn(consentToRecord);
		Assert.assertEquals(yesOptionUnderConsentToRecord.getText(), Option);
		clickOn(consentToRecord);
	}

	/****
	 * verify No option is present in consent to record option
	 */
	public void veifyNoOptionIsPresent(String Option) {
		clickOn(consentToRecord);
		Assert.assertEquals(NoOptionUnderConsentToRecord.getText(), Option);
		clickOn(consentToRecord);
	}

	/**
	 * Verify Auto generated text should not be editable
	 */
	public void verifyAutoGeneratedTemporaryINPIsNotEditable() {
		Assert.assertFalse(addSubPopup_TempINP.isEnabled());
		reportInfo();
	}

	/**
	 * Verify Correct error header message is display
	 * 
	 * @param errorTextToBeVerified
	 */
	public void verifyHeaderErrorText(String errorTextToBeVerified) {
		Assert.assertTrue(headerErrorTXT.getText().trim().contains(errorTextToBeVerified));
		reportInfo();
	}

	/**
	 * Click on cancel button to close the error container.
	 */
	public void closeHeaderErrorMessage() {
		clickOn(headerErrorCloseBtN);
	}

	/* Verify Subject status */
	public void verifySubjectStatus(String subjectName, String statusToBeVerify) {
		WebElement ele = null;
		boolean flag = false;
		do {
			try {

				ele = driver.findElement(By.xpath("//div[@id='portal-grid-page-content']//div[div[4]//text() = '"
						+ statusToBeVerify + "' and div[1]//text()='" + subjectName + "']"));
				moveToElement(ele);
				flag = true;
				break;
			} catch (Throwable e) {
				scrollDown("100");
				try {
					Thread.sleep(600);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		} while ((flag == false)
				&& driver.findElements(By.xpath("//div[@class='row text-center text-muted']")).size() > 0);
		reportInfo();
		Assert.assertTrue(flag);
		scrollToTopOfThePage();

	}

	/** Return Back to Home Page */
	public MedAvantePortalPage navigateToHomePage() {
		clickOn(homeICN);
		return (PageFactory.initElements(driver, MedAvantePortalPage.class));
	}

	/**
	 * Verify Screening Number and TemporaryID fields are highlighted by entering
	 * values in both fields.
	 */
	public String verifyScreenAndTempFieldHighlighted(String screeningNum) {

		boolean flag = true;

		String backgroundcolorScreening = addSubPopup_ScreeningINP.getCssValue("background-color");
		String backgroundcolorTemporary = addSubPopup_GenerateTemporaryIDTXT.getCssValue("background-color");

		inputScreeningNum(screeningNum);

		String backgroundcolorTemporaryAftr = addSubPopup_TempINP.getCssValue("background-color");

		if ((backgroundcolorTemporary.toString().contentEquals(backgroundcolorTemporaryAftr.toString())) == false) {
			flag = false;
			Assert.assertFalse(flag, "Temporary id Field is highlighted");
		} else {
			Assert.assertTrue(flag);
		}

		clearScreeningInp();
		String SubjectNumber = generateAutoTemporaryID();
		String backgroundcolorScreening_after = addSubPopup_ScreeningINP.getCssValue("background-color");

		flag = true;
		if ((backgroundcolorScreening.toString().contentEquals(backgroundcolorScreening_after.toString())) == false) {
			flag = false;
			Assert.assertFalse(flag, "Screening Field is highlighted");
		} else {
			Assert.assertTrue(flag);
		}

		return SubjectNumber;
	}

	/*****
	 * Click on Auto-generate Temporary ID icon
	 */
	public void clickonAutogenerateTemporaryIdIcon() {
		waitAndClick(autoGeneratetempIdIcon);
		_normalWait(200);
		
	}

	/****
	 * required Fields are highlighted
	 */

	public void requiredFieldsOnAddSubjectPopUpIshighLighted(String highLightColor) {
		boolean flag = false;
		if (requiredScreeningNumberOnAddSubjectPopUp.getCssValue("background-color").contains(highLightColor)
				&& addSubPopup_LanguageDROPDOWNFieldVAL.getCssValue("background-color").contains(highLightColor)) {
			flag = true;
		}
		Assert.assertTrue(flag);
	}

	/****
	 * verify screening input and language textbox is editable
	 */

	public void verifyFieldsAreEditable() {
		Assert.assertTrue(addSubPopup_ScreeningINP.isEnabled() && addSubPopup_SelectedSubjectLanguage.isEnabled());
	}

	/****
	 * clickon consent to record
	 */

	public void clickOnConsentToRecord() {
		waitAndClick(consentToRecord);
	}

	/***
	 * select yes from consent To record
	 */

	public void selectOptionFromConsentTorecord(String Option) {
		for (WebElement optionUnderConsentrecord : optionUnderConsentTorecordDropDown) {
			if (optionUnderConsentrecord.getText().equalsIgnoreCase(Option)) {
				clickOn(optionUnderConsentrecord);
			}
		}

	}

}
